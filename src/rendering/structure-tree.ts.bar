import { Structure, StructureId } from '../structure';
import { Tree } from '../utilities/tree';

export class StructureTree {
    private constructor(
        readonly structureTree: Tree<StructureId>,
        readonly structureById: Map<StructureId, Structure>
    ) {}

    add(id: StructureId, structure: Structure) {
        if (this.structureById.has(id)) throw new Error(`Structure with id ${id} already exists`);
        this.structureById.set(id, structure);
        this.structureTree.add(id);
    }

    remove(id: StructureId) {
        const structure = this.structureById.get(id);
        if (structure === undefined) throw new Error(`Structure with id ${id} does not exist`);
        const parentId = this.structureTree.getParent(id);
        if (parentId !== null) {
            const parent = this.structureById.get(parentId);
            if (parent === undefined) {
                throw new Error(`ParentId ${parentId} is present in the tree but absent from structureById`);
            }
            if (parent.canHaveChildren()) {
                parent.removeChild(structure);
            } else {
                throw new Error(`Structure ${id} is a child of ${parentId}, but the latter cannot have children`);
            }
        }
        this.structureTree.remove(id);
        this.structureById.delete(id);
    }

    clone() {
        const structureTree = this.structureTree.clone();
        const structureById = new Map(
            Array.from(this.structureById).map(([id, structure]) => [id, structure.clone()] as const)
        );
        return new StructureTree(structureTree, structureById);
    }

    get(id: StructureId): Structure {
        const structure = this.structureById.get(id);
        if (structure === undefined) {
            throw new Error(`Structure with id ${id} is not found`);
        }
        return structure;
    }

    getRoots() {
        return this.structureTree.getRoots().map(rootId => this.get(rootId));
    }

    isEmpty() {
        return this.structureById.size === 0;
    }

    clear() {
        this.structureById.clear();
        this.structureTree.clear();
    }
}
